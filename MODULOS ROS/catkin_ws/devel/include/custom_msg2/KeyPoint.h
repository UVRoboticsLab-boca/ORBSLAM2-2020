// Generated by gencpp from file custom_msg2/KeyPoint.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG2_MESSAGE_KEYPOINT_H
#define CUSTOM_MSG2_MESSAGE_KEYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_msg2/Point2f.h>

namespace custom_msg2
{
template <class ContainerAllocator>
struct KeyPoint_
{
  typedef KeyPoint_<ContainerAllocator> Type;

  KeyPoint_()
    : pt()
    , size(0.0)
    , angle(0.0)
    , response(0.0)
    , octave(0)
    , class_id(0)
    , idKeypoint(0)  {
    }
  KeyPoint_(const ContainerAllocator& _alloc)
    : pt(_alloc)
    , size(0.0)
    , angle(0.0)
    , response(0.0)
    , octave(0)
    , class_id(0)
    , idKeypoint(0)  {
  (void)_alloc;
    }



   typedef  ::custom_msg2::Point2f_<ContainerAllocator>  _pt_type;
  _pt_type pt;

   typedef float _size_type;
  _size_type size;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _response_type;
  _response_type response;

   typedef int32_t _octave_type;
  _octave_type octave;

   typedef int32_t _class_id_type;
  _class_id_type class_id;

   typedef int32_t _idKeypoint_type;
  _idKeypoint_type idKeypoint;





  typedef boost::shared_ptr< ::custom_msg2::KeyPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg2::KeyPoint_<ContainerAllocator> const> ConstPtr;

}; // struct KeyPoint_

typedef ::custom_msg2::KeyPoint_<std::allocator<void> > KeyPoint;

typedef boost::shared_ptr< ::custom_msg2::KeyPoint > KeyPointPtr;
typedef boost::shared_ptr< ::custom_msg2::KeyPoint const> KeyPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg2::KeyPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg2::KeyPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_msg2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_msg2': ['/home/robotica/catkin_ws/src/custom_msg2/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg2::KeyPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg2::KeyPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg2::KeyPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg2::KeyPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg2::KeyPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg2::KeyPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg2::KeyPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64408df8b1cfd0d048a1615611dc5467";
  }

  static const char* value(const ::custom_msg2::KeyPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64408df8b1cfd0d0ULL;
  static const uint64_t static_value2 = 0x48a1615611dc5467ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg2::KeyPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg2/KeyPoint";
  }

  static const char* value(const ::custom_msg2::KeyPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg2::KeyPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg2/Point2f pt\n\
float32 size\n\
float32 angle\n\
float32 response\n\
int32 octave\n\
int32 class_id\n\
int32 idKeypoint\n\
\n\
\n\
================================================================================\n\
MSG: custom_msg2/Point2f\n\
float32 x\n\
float32 y\n\
\n\
";
  }

  static const char* value(const ::custom_msg2::KeyPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg2::KeyPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pt);
      stream.next(m.size);
      stream.next(m.angle);
      stream.next(m.response);
      stream.next(m.octave);
      stream.next(m.class_id);
      stream.next(m.idKeypoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg2::KeyPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg2::KeyPoint_<ContainerAllocator>& v)
  {
    s << indent << "pt: ";
    s << std::endl;
    Printer< ::custom_msg2::Point2f_<ContainerAllocator> >::stream(s, indent + "  ", v.pt);
    s << indent << "size: ";
    Printer<float>::stream(s, indent + "  ", v.size);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "response: ";
    Printer<float>::stream(s, indent + "  ", v.response);
    s << indent << "octave: ";
    Printer<int32_t>::stream(s, indent + "  ", v.octave);
    s << indent << "class_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "idKeypoint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.idKeypoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG2_MESSAGE_KEYPOINT_H
